<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

	 <!-- 引入配置文件 -->
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:/properties/jdbc.properties" />
    </bean>
    
    <!-- fMobile数据源 start-->
    <bean name="fMobileDruidDataSource" class="com.alibaba.druid.pool.xa.DruidXADataSource" init-method="init" destroy-method="close">
        <!-- 打开Druid监控功能 -->
        <property name="driverClassName" value="${fmobile.driverClassName}"/>
        <property name="url" value="${fmobile.url}"/>
        <property name="username" value="${fmobile.username}"/>
        <property name="password" value="${fmobile.password}"/>
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
        <property name="validationQuery" value="${druid.validationQuery}"/>
        <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。  -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能  -->
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
        <!--建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。  -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${druid.maxIdle}"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${druid.minIdle}"/>
        <!-- 获取连接最大等待时间-->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置监控统计拦截的filters --> 
        <property name="filters" value="${druid.filters}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxOpenPreparedStatements}"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>
        <!-- 关闭abandoned连接时输出错误日志 -->
        <property name="logAbandoned" value="${druid.logAbandoned}"/>
    </bean>

	<!--分布式多事务控制  -->
    <bean class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init" destroy-method="close" id="fMobileXADataSource">
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"/>
        <property name="uniqueResourceName" value="fMobileDruidDataSource" />
        <property name="xaDataSource" ref="fMobileDruidDataSource"/>
    </bean>

    <bean id="fMobileSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath*:mybatis/fmobile/*.xml"/>
        <property name="dataSource" ref="fMobileXADataSource"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <property name="plugins">
        	<array>
        		<bean class="com.cn.vanke.page.interceptor.PagerInterceptor">
        			<property name="properties">
						<value>dialect=mysql</value>
					</property>
        		</bean>
        		<bean class="com.cn.vanke.persistence.mybatis.MapperInterceptor">
        			<property name="properties">
						<value>mappers=com.cn.vanke.persistence.mybatis.Mapper</value>
					</property>
        		</bean>
        	</array>
        </property>
    </bean>

    <bean id="fMobileMapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cn.vanke.dao.fmobile"/>
        <property name="sqlSessionFactoryBeanName" value="fMobileSqlSessionFactory"/>
    </bean>
    
    <!-- 初始化fMobileSqlSession -->
	<bean id="fMobileSqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="fMobileSqlSessionFactory" />
	</bean>

	<!-- 初始化fMobileSqlMapper 执行sql -->
	<bean id="fMobileSqlMapper" class="com.cn.vanke.persistence.sql.SqlMapper" scope="prototype">
		<constructor-arg ref="fMobileSqlSession" />
	</bean>
    <!-- master数据源 end-->

    <!-- archibus数据源 start-->
    <bean name="archibusDruidDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 打开Druid监控功能 -->
        <property name="driverClassName" value="${archibus.driverClassName}"/>
        <property name="url" value="${archibus.url}"/>
        <property name="username" value="${archibus.username}"/>
        <property name="password" value="${archibus.password}"/>
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
        <property name="validationQuery" value="${druid.validationQuery}"/>
        <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。  -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能  -->
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
        <!--建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。  -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="${druid.maxIdle}"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${druid.minIdle}"/>
        <!-- 获取连接最大等待时间-->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置监控统计拦截的filters --> 
        <property name="filters" value="${druid.filters}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxOpenPreparedStatements}"/>
        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}"/>
        <!-- 关闭abandoned连接时输出错误日志 -->
        <property name="logAbandoned" value="${druid.logAbandoned}"/>
    </bean>

    <bean id="archibusSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="mapperLocations" value="classpath*:mybatis/archibus/*.xml"/>
        <property name="dataSource" ref="archibusDruidDataSource"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"/>
        <property name="plugins">
        	<array>
        		<bean class="com.cn.vanke.page.interceptor.PagerInterceptor">
        			<property name="properties">
						<value>dialect=sqlserver</value>
					</property>
        		</bean>
        		<bean class="com.cn.vanke.persistence.mybatis.MapperInterceptor">
        			<property name="properties">
						<value>mappers=com.cn.vanke.persistence.mybatis.Mapper</value>
					</property>
        		</bean>
        	</array>
        </property>
    </bean>

    <bean id="archibusMapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cn.vanke.dao.archibus"/>
        <property name="sqlSessionFactoryBeanName" value="archibusSqlSessionFactory"/>
    </bean>
    <!-- 初始化archibusSqlSession -->
	<bean id="archibusSqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="archibusSqlSessionFactory" />
	</bean>

	<!-- 初始化fMobileSqlMapper 执行sql -->
	<bean id="archibusSqlMapper" class="com.cn.vanke.persistence.sql.SqlMapper" scope="prototype">
		<constructor-arg ref="archibusSqlSession" />
	</bean>
    <!-- archibus数据源 end-->
</beans>